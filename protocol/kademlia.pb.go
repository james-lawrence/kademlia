// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kademlia.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	kademlia.proto

It has these top-level messages:
	Node
	PingRequest
	PingResponse
	ProbeRequest
	ProbeResponse
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Node struct {
	// ID is a 20 byte unique identifier
	ID []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// IP is the public address IP of the node
	IP string `protobuf:"bytes,2,opt,name=IP" json:"IP,omitempty"`
	// Port is the public port of the node
	Port int32 `protobuf:"varint,3,opt,name=Port" json:"Port,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Node) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Node) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Node) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PingRequest struct {
	Sender   *Node `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Receiver *Node `protobuf:"bytes,2,opt,name=Receiver" json:"Receiver,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingRequest) GetSender() *Node {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *PingRequest) GetReceiver() *Node {
	if m != nil {
		return m.Receiver
	}
	return nil
}

type PingResponse struct {
	Sender   *Node `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Receiver *Node `protobuf:"bytes,2,opt,name=Receiver" json:"Receiver,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingResponse) GetSender() *Node {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *PingResponse) GetReceiver() *Node {
	if m != nil {
		return m.Receiver
	}
	return nil
}

type ProbeRequest struct {
	Sender   *Node  `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Receiver *Node  `protobuf:"bytes,2,opt,name=Receiver" json:"Receiver,omitempty"`
	Key      []byte `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *ProbeRequest) Reset()                    { *m = ProbeRequest{} }
func (m *ProbeRequest) String() string            { return proto.CompactTextString(m) }
func (*ProbeRequest) ProtoMessage()               {}
func (*ProbeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProbeRequest) GetSender() *Node {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *ProbeRequest) GetReceiver() *Node {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *ProbeRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type ProbeResponse struct {
	Sender   *Node   `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Receiver *Node   `protobuf:"bytes,2,opt,name=Receiver" json:"Receiver,omitempty"`
	Key      []byte  `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Nearest  []*Node `protobuf:"bytes,4,rep,name=nearest" json:"nearest,omitempty"`
}

func (m *ProbeResponse) Reset()                    { *m = ProbeResponse{} }
func (m *ProbeResponse) String() string            { return proto.CompactTextString(m) }
func (*ProbeResponse) ProtoMessage()               {}
func (*ProbeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProbeResponse) GetSender() *Node {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *ProbeResponse) GetReceiver() *Node {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *ProbeResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ProbeResponse) GetNearest() []*Node {
	if m != nil {
		return m.Nearest
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "kademlia.Node")
	proto.RegisterType((*PingRequest)(nil), "kademlia.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "kademlia.PingResponse")
	proto.RegisterType((*ProbeRequest)(nil), "kademlia.ProbeRequest")
	proto.RegisterType((*ProbeResponse)(nil), "kademlia.ProbeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Kademlia service

type KademliaClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
}

type kademliaClient struct {
	cc *grpc.ClientConn
}

func NewKademliaClient(cc *grpc.ClientConn) KademliaClient {
	return &kademliaClient{cc}
}

func (c *kademliaClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/kademlia.kademlia/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kademliaClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := grpc.Invoke(ctx, "/kademlia.kademlia/Probe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Kademlia service

type KademliaServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
}

func RegisterKademliaServer(s *grpc.Server, srv KademliaServer) {
	s.RegisterService(&_Kademlia_serviceDesc, srv)
}

func _Kademlia_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kademlia.kademlia/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kademlia_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kademlia.kademlia/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kademlia_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kademlia.kademlia",
	HandlerType: (*KademliaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Kademlia_Ping_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _Kademlia_Probe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kademlia.proto",
}

func init() { proto.RegisterFile("kademlia.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0x24, 0xad, 0x71, 0x1a, 0x83, 0x0c, 0xa8, 0xa1, 0xa7, 0xb0, 0x07, 0x09, 0x1e,
	0x7a, 0xa8, 0x07, 0xa1, 0x47, 0xe9, 0x25, 0x08, 0xb2, 0xac, 0x37, 0x6f, 0x49, 0x33, 0x48, 0xb0,
	0x66, 0xeb, 0x66, 0x15, 0x3c, 0xf9, 0x28, 0xbe, 0xaa, 0x64, 0xdb, 0xc4, 0x60, 0xbc, 0xe6, 0x36,
	0x3b, 0xf3, 0xcf, 0x7e, 0xfc, 0x33, 0x03, 0xe1, 0x4b, 0x56, 0xd0, 0xeb, 0xb6, 0xcc, 0x16, 0x3b,
	0xad, 0x8c, 0x42, 0xbf, 0x7d, 0xf3, 0x15, 0x78, 0x0f, 0xaa, 0x20, 0x0c, 0xc1, 0x49, 0xd7, 0x11,
	0x8b, 0x59, 0x12, 0x48, 0x27, 0x5d, 0xdb, 0xb7, 0x88, 0x9c, 0x98, 0x25, 0x27, 0xd2, 0x49, 0x05,
	0x22, 0x78, 0x42, 0x69, 0x13, 0xb9, 0x31, 0x4b, 0x26, 0xd2, 0xc6, 0x3c, 0x83, 0x99, 0x28, 0xab,
	0x67, 0x49, 0x6f, 0xef, 0x54, 0x1b, 0xbc, 0x82, 0xe9, 0x23, 0x55, 0x05, 0x69, 0xfb, 0xcd, 0x6c,
	0x19, 0x2e, 0x3a, 0x6a, 0x83, 0x90, 0x87, 0x2a, 0x5e, 0x83, 0x2f, 0x69, 0x43, 0xe5, 0x07, 0x69,
	0x0b, 0x18, 0x2a, 0xbb, 0x3a, 0xcf, 0x21, 0xd8, 0x23, 0xea, 0x9d, 0xaa, 0x6a, 0x1a, 0x85, 0x61,
	0x20, 0x10, 0x5a, 0xe5, 0x34, 0xa2, 0x0f, 0x3c, 0x03, 0xf7, 0x9e, 0x3e, 0xed, 0xf4, 0x02, 0xd9,
	0x84, 0xfc, 0x9b, 0xc1, 0xe9, 0x01, 0x3b, 0x9e, 0xb7, 0x21, 0x17, 0x13, 0x38, 0xae, 0x28, 0xd3,
	0x54, 0x9b, 0xc8, 0x8b, 0xdd, 0x7f, 0x9a, 0xdb, 0xf2, 0xf2, 0x0b, 0xba, 0x33, 0xc1, 0x5b, 0xf0,
	0x9a, 0x3d, 0xe0, 0xf9, 0xaf, 0xb8, 0xb7, 0xfa, 0xf9, 0xc5, 0xdf, 0xf4, 0xde, 0x12, 0x3f, 0xc2,
	0x15, 0x4c, 0xac, 0x4b, 0xec, 0x4b, 0x7a, 0xd3, 0x9e, 0x5f, 0x0e, 0xf2, 0x6d, 0xef, 0x1d, 0x3c,
	0xf9, 0xf6, 0x5c, 0x37, 0x6a, 0x9b, 0x4f, 0x6d, 0x74, 0xf3, 0x13, 0x00, 0x00, 0xff, 0xff, 0x64,
	0xf3, 0x48, 0xb2, 0xca, 0x02, 0x00, 0x00,
}
